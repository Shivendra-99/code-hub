import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';

dotenv.config();

export const globalResponse = (res, status, message, title, userInfo) => {
  // send() -: when we use send method express try to convert object in to json and we can also send string
  // html e.t.c
  if (!userInfo) {
    return res.status(status).json({
      title,
      message,
    });
  }

  return res.status(status).json({
    title,
    message,
    user: {
      name: userInfo.name,
      email: userInfo.email,
      role: userInfo.role,
    },
  });
};

export const generateTokenAndSetCookie = (res, user) => {
  const jwtToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
    expiresIn: "7d",
    issuer: "code-hub",
  });

  // here we are generating the token that we are going to use later to verify if user is logged in or not
  // jwt.sign ->  We are going to generate tamper-proof token by cryptographically securing it using a secret key or a private key.
  // issuer -> Using this we can check whatever token we are accessing it's generated by us or not while verifying
  // expiresIn -> while verifying token we can make sure token is valid using verify method provided by jwttoken

  res.cookie("authToken", jwtToken, {
    httpOnly: true,
    secure: true,
    sameSite: "strict",
    maxAge: 1000 * 60 * 60 * 24 * 7,
  });

  // Here we are going to scecurly save the token in cookie
  // httpOnly -: The cookie cannot be read using document.cookie in the browser and
  // ensures the cookie is protected from client-side scripts, preventing potential
  // JavaScript-based attacks (like XSS).
  // Secure -: its make sure cookie only sent over https request,
  // maxAge -: it will make sure cookie will expire after given time
  // sameSite:-  Restricts cookie to same-site requests (prevents CSRF)
  // expires:- new Date(Date.now() + 60 * 60 * 1000), // Expires in 1 hour
};