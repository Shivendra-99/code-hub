import User from "../Model/User.js";
import argon from "argon2";
import jwt from "jsonwebtoken";
import crypto from 'crypto';

export const registerUser = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    if (!email || !name || !password) {
      res.status(400).send({
        title: "Invalid Request",
        message: "Invalid Input please enter all the mandatory fields",
      });
    }
    const isEmailAlreadyPresent = await User.findOne({ email });
    if (isEmailAlreadyPresent) {
      res.status(409).send({
        title: "User Already Exits",
        message:
          "User is already registered. please try to login if you forgot password try to reset",
      });
    }
    console.log(isEmailAlreadyPresent);

    //hashing password
    const hashedPassword = await argon.hash(password);
    console.log(hashedPassword);
    const newUser = await User.create({
      email,
      name,
      password: hashedPassword,
    }); // When we use create means it will generate the _id and save in local not in the DB and still we can
    // Modify the data

    const jwtToken = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
      issuer: "code-hub",
    }); // here we are generating the token that we are going to use later to verify if user is logged in or not
    // jwt.sign ->  its we are tamper-proof token by cryptographically securing it using a secret key or a private key.
    // issuer -> Using this we can check whatever token we are accessing it's generated by us or not while verifying
    // expiresIn -> while verifying token we can make sure token is valid using verify method provided by jwttoken

    res.cookie("authToken", jwtToken, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
      maxAge: 1000 * 60 * 60 * 24 * 7,
    });
    // Here we are going to scecurly save the token in cookie
    // httpOnly -: The cookie cannot be read using document.cookie in the browser and
    // ensures the cookie is protected from client-side scripts, preventing potential
    // JavaScript-based attacks (like XSS).
    // Secure -: its make sure cookie only sent over https request,
    // maxAge -: it will make sure cookie will expire after given time
    // sameSite:-  Restricts cookie to same-site requests (prevents CSRF)
    // expires:- new Date(Date.now() + 60 * 60 * 1000), // Expires in 1 hour

    const token = crypto.randomBytes(32).toString("hex");

    newUser.verificationToken = token;

    await newUser.save();

    res.status(201).json({
      title: "Registration sccuessfully.",
      message: "User successfully saved in to DB",
      user : {
         name: newUser.name,
         email: newUser.email,
         role: newUser.role
      }
    });

  } catch (error) {
    console.log(error);
    res.status(500).send({
      title: "Something went wrong",
      message: error
    })
  }
};
